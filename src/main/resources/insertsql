
DROP PROCEDURE IF EXISTS generate_products;
DROP PROCEDURE IF EXISTS generate_prices;

-- category 테이블 더미 데이터 (기존 데이터 유지)
INSERT INTO `category` (`parent_id`, `name`, `path`) VALUES
(1, '전자제품', 'root/전자제품'),
(1, '가전제품', 'root/가전제품'),
(1, '컴퓨터', 'root/컴퓨터'),
(2, '스마트폰', 'root/전자제품/스마트폰'),
(2, '태블릿', 'root/전자제품/태블릿'),
(3, '냉장고', 'root/가전제품/냉장고'),
(3, '세탁기', 'root/가전제품/세탁기'),
(4, '노트북', 'root/컴퓨터/노트북'),
(4, '데스크톱', 'root/컴퓨터/데스크톱');

-- member 테이블 더미 데이터 (10명의 멤버)
INSERT INTO `member` (`name`) VALUES
('김철수'), ('이영희'), ('박민수'), ('최지연'), ('홍길동'),
('김민수'), ('이지연'), ('박지훈'), ('최수진'), ('홍성우');

-- product 테이블 더미 데이터 생성 (각 카테고리별 200개)
DELIMITER //
CREATE PROCEDURE generate_products()
BEGIN
    DECLARE i INT DEFAULT 1;
    DECLARE base_price BIGINT;
    DECLARE category_id INT;
    DECLARE member_id INT;

    -- 노트북 (200개)
    SET category_id = (SELECT id FROM category WHERE name = '노트북' LIMIT 1);
    WHILE i <= 200 DO
        SET base_price = 1000000 + (i * 50000);
        SET member_id = FLOOR(1 + RAND() * 10);

        INSERT INTO `product` (
            `lmonitor_size`, `category_id`, `lowest_price`, `member_id`,
            `release_time`, `update_time`, `dtype`, `category_path`,
            `image_url`, `name`
        ) VALUES (
            15.6 + (RAND() * 2.0), category_id, base_price, member_id,
            DATE_SUB(NOW(), INTERVAL FLOOR(1 + RAND() * 365) DAY),
            NOW(),
            'laptop', 'root/컴퓨터/노트북',
            CONCAT('https://example.com/notebook', i, '.jpg'),
            CONCAT('맥북 프로 ', i, '세대')
        );

        SET i = i + 1;
    END WHILE;

    -- 스마트폰 (200개)
    SET category_id = (SELECT id FROM category WHERE name = '스마트폰' LIMIT 1);
    SET i = 1;
    WHILE i <= 200 DO
        SET base_price = 800000 + (i * 30000);
        SET member_id = FLOOR(1 + RAND() * 10);

        INSERT INTO `product` (
            `tmonitor_size`, `category_id`, `lowest_price`, `member_id`,
            `release_time`, `update_time`, `dtype`, `category_path`,
            `image_url`, `name`
        ) VALUES (
            6.0 + (RAND() * 2.0), category_id, base_price, member_id,
            DATE_SUB(NOW(), INTERVAL FLOOR(1 + RAND() * 365) DAY),
            NOW(),
            'tv', 'root/전자제품/스마트폰',
            CONCAT('https://example.com/phone', i, '.jpg'),
            CONCAT('갤럭시 S', i)
        );

        SET i = i + 1;
    END WHILE;

    -- 냉장고 (200개)
    SET category_id = (SELECT id FROM category WHERE name = '냉장고' LIMIT 1);
    SET i = 1;
    WHILE i <= 200 DO
        SET base_price = 1500000 + (i * 50000);
        SET member_id = FLOOR(1 + RAND() * 10);

        INSERT INTO `product` (
            `category_id`, `lowest_price`, `member_id`,
            `release_time`, `update_time`, `dtype`, `category_path`, `color`,
            `image_url`, `name`
        ) VALUES (
            category_id, base_price, member_id,
            DATE_SUB(NOW(), INTERVAL FLOOR(1 + RAND() * 365) DAY),
            NOW(),
            'furniture', 'root/가전제품/냉장고',
            ELT(FLOOR(1 + RAND() * 3), '스테인리스', '화이트', '블랙'),
            CONCAT('https://example.com/fridge', i, '.jpg'),
            CONCAT('삼성 냉장고 ', i, '세대')
        );

        SET i = i + 1;
    END WHILE;

    -- 태블릿 (200개)
    SET category_id = (SELECT id FROM category WHERE name = '태블릿' LIMIT 1);
    SET i = 1;
    WHILE i <= 200 DO
        SET base_price = 900000 + (i * 40000);
        SET member_id = FLOOR(1 + RAND() * 10);

        INSERT INTO `product` (
            `tmonitor_size`, `category_id`, `lowest_price`, `member_id`,
            `release_time`, `update_time`, `dtype`, `category_path`,
            `image_url`, `name`
        ) VALUES (
            10.5 + (RAND() * 3.0), category_id, base_price, member_id,
            DATE_SUB(NOW(), INTERVAL FLOOR(1 + RAND() * 365) DAY),
            NOW(),
            'tv', 'root/전자제품/태블릿',
            CONCAT('https://example.com/tablet', i, '.jpg'),
            CONCAT('아이패드 ', i, '세대')
        );

        SET i = i + 1;
    END WHILE;

    -- 세탁기 (200개)
    SET category_id = (SELECT id FROM category WHERE name = '세탁기' LIMIT 1);
    SET i = 1;
    WHILE i <= 200 DO
        SET base_price = 1200000 + (i * 60000);
        SET member_id = FLOOR(1 + RAND() * 10);

        INSERT INTO `product` (
            `category_id`, `lowest_price`, `member_id`,
            `release_time`, `update_time`, `dtype`, `category_path`, `color`,
            `image_url`, `name`
        ) VALUES (
            category_id, base_price, member_id,
            DATE_SUB(NOW(), INTERVAL FLOOR(1 + RAND() * 365) DAY),
            NOW(),
            'furniture', 'root/가전제품/세탁기',
            ELT(FLOOR(1 + RAND() * 3), '화이트', '스테인리스', '블랙'),
            CONCAT('https://example.com/washing', i, '.jpg'),
            CONCAT('LG 세탁기 ', i, '세대')
        );

        SET i = i + 1;
    END WHILE;
END //
DELIMITER ;

-- price_info 테이블 더미 데이터 생성 (각 제품별 10개씩)
DELIMITER //
CREATE PROCEDURE generate_prices()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE product_id INT;
    DECLARE base_price BIGINT;
    DECLARE delivery_fee INT;
    DECLARE shop_name VARCHAR(255);
    DECLARE i INT;
    DECLARE cur CURSOR FOR SELECT id, lowest_price FROM product;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO product_id, base_price;
        IF done THEN
            LEAVE read_loop;
        END IF;

        SET i = 0;
        price_loop: LOOP
            IF i >= 10 THEN
                LEAVE price_loop;
            END IF;

            -- 가격은 최저가의 105% ~ 120% 사이로 설정
            SET @generated_price = base_price + (base_price * (0.05 + RAND() * 0.15));

            -- 배송비는 20000 ~ 50000 사이로 설정
            SET delivery_fee = 20000 + FLOOR(RAND() * 30000);

            -- 판매처는 랜덤으로 설정
            SET shop_name = ELT(FLOOR(1 + RAND() * 5),
                'Apple Store', '삼성전자', 'LG전자', '네이버 쇼핑', '쿠팡');

            INSERT INTO `price_info` (
                `delivery_fee`, `price`, `product_id`, `updated_at`,
                `link_url`, `shop_name`
            ) VALUES (
                delivery_fee, @generated_price, product_id, NOW(),
                CONCAT('https://example.com/product/', product_id, '/', i),
                shop_name
            );

            SET i = i + 1;
        END LOOP;
    END LOOP;

    CLOSE cur;
END //
DELIMITER ;

-- 기존 데이터 삭제
DELETE FROM price_info;
DELETE FROM product;
-- 프로시저 실행
CALL generate_products();
CALL generate_prices();
